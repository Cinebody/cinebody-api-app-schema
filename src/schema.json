{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Cinebody API",
    "version" : "v3"
  },
  "servers" : [ {
    "url" : "https://app-api.cinebody.com/"
  } ],
  "security" : [ {
    "APIKey" : [ ]
  } ],
  "paths" : {
    "/app/3.0/organizations" : {
      "get" : {
        "tags" : [ "Organizations" ],
        "summary" : "Get organizations this app has access to",
        "parameters" : [ {
          "name" : "attributes",
          "in" : "query",
          "description" : "Limit the response to specific attributes to reduce response size. Default is to return everything.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrganizationAttribute"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "invite",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "400" : {
            "description" : "A bad request was made. Check the error code and parameters sent.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBadRequest"
                }
              }
            }
          },
          "403" : {
            "description" : "The app is not authorized to perform that action.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorNotAuthorized"
                }
              }
            }
          },
          "406" : {
            "description" : "The request is missing required parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMissingParameters"
                }
              }
            }
          },
          "500" : {
            "description" : "The server encountered an unspecified error. This is a catch-all error. Check your request and parameters are valid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorServerError"
                }
              }
            }
          }
        }
      }
    },
    "/app/3.0/organizations/{organizationId}" : {
      "get" : {
        "tags" : [ "Organizations" ],
        "summary" : "Get a single organization",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The organization to fetch",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributes",
          "in" : "query",
          "description" : "Limit the response to specific attributes to reduce response size. Default is to return everything.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrganizationAttribute"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "invite",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "400" : {
            "description" : "A bad request was made. Check the error code and parameters sent.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBadRequest"
                }
              }
            }
          },
          "403" : {
            "description" : "The app is not authorized to perform that action.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorNotAuthorized"
                }
              }
            }
          },
          "406" : {
            "description" : "The request is missing required parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMissingParameters"
                }
              }
            }
          },
          "500" : {
            "description" : "The server encountered an unspecified error. This is a catch-all error. Check your request and parameters are valid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorServerError"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Organizations" ],
        "summary" : "Update an organization",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The organization to fetch",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributes",
          "in" : "query",
          "description" : "Limit the response to specific attributes to reduce response size. Default is to return everything.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrganizationAttribute"
            }
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/organizations_organizationId_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "invite",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "400" : {
            "description" : "A bad request was made. Check the error code and parameters sent.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBadRequest"
                }
              }
            }
          },
          "403" : {
            "description" : "The app is not authorized to perform that action.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorNotAuthorized"
                }
              }
            }
          },
          "406" : {
            "description" : "The request is missing required parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMissingParameters"
                }
              }
            }
          },
          "500" : {
            "description" : "The server encountered an unspecified error. This is a catch-all error. Check your request and parameters are valid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorServerError"
                }
              }
            }
          }
        }
      }
    },
    "/app/3.0/organizations/{organizationId}/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get organization users",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The organization to fetch",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Limit results to users that match this name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "trav"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/UsersSortBy"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SortOrder"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/OrganizationUserType"
          }
        }, {
          "name" : "attributes",
          "in" : "query",
          "description" : "Limit the response to specific attributes to reduce response size. Default is to return everything.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserAttribute"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The users that match the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_2"
                }
              }
            }
          },
          "400" : {
            "description" : "A bad request was made. Check the error code and parameters sent.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBadRequest"
                }
              }
            }
          },
          "403" : {
            "description" : "The app is not authorized to perform that action.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorNotAuthorized"
                }
              }
            }
          },
          "406" : {
            "description" : "The request is missing required parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMissingParameters"
                }
              }
            }
          },
          "500" : {
            "description" : "The server encountered an unspecified error. This is a catch-all error. Check your request and parameters are valid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorServerError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Add user to an organization",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The organization id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributes",
          "in" : "query",
          "description" : "Limit the response to specific attributes to reduce response size. Default is to return everything.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserAttribute"
            }
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/organizationId_users_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The users that match the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_2"
                }
              }
            }
          },
          "400" : {
            "description" : "A bad request was made. Check the error code and parameters sent.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBadRequest"
                }
              }
            }
          },
          "403" : {
            "description" : "The app is not authorized to perform that action.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorNotAuthorized"
                }
              }
            }
          },
          "406" : {
            "description" : "The request is missing required parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMissingParameters"
                }
              }
            }
          },
          "500" : {
            "description" : "The server encountered an unspecified error. This is a catch-all error. Check your request and parameters are valid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorServerError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Organization" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "example" : "Lumenati"
          },
          "status" : {
            "$ref" : "#/components/schemas/OrganizationStatus"
          },
          "storageStatus" : {
            "$ref" : "#/components/schemas/OrganizationStorageStatus"
          },
          "addressName" : {
            "type" : "string",
            "nullable" : true
          },
          "addressLine1" : {
            "type" : "string",
            "nullable" : true
          },
          "addressLine2" : {
            "type" : "string",
            "nullable" : true
          },
          "addressCity" : {
            "type" : "string",
            "nullable" : true
          },
          "addressState" : {
            "type" : "string",
            "nullable" : true
          },
          "addressZip" : {
            "type" : "string",
            "nullable" : true
          },
          "addressCountry" : {
            "type" : "string",
            "nullable" : true
          },
          "profileImages" : {
            "$ref" : "#/components/schemas/Organization_profileImages"
          },
          "heroImages" : {
            "$ref" : "#/components/schemas/Organization_heroImages"
          },
          "isBilledOffline" : {
            "type" : "boolean",
            "description" : "Whether the organization is billed offline via manual invoice",
            "example" : false
          },
          "lockedClipsAt" : {
            "type" : "string",
            "description" : "If the organization has exceeded storage limits or let the subscription lapse, clips may be locked",
            "nullable" : true
          },
          "endFreeTrialAt" : {
            "type" : "string",
            "description" : "When the free trial will end. This value might be in the past.",
            "example" : "2021-07-29T01:42:13.456Z"
          },
          "shouldAutoUpgrade" : {
            "type" : "boolean",
            "description" : "Whether storage add-ons will be automatically added to the subscription when storage limits are exceeded."
          },
          "isLocked" : {
            "type" : "boolean",
            "description" : "The organization is locked out because of a subscription status issue",
            "example" : false
          }
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string",
            "nullable" : true
          },
          "lastName" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "A friendly name for the user. This value will always be a string. If the user has not set a name it will default to Creator"
          },
          "email" : {
            "type" : "string",
            "description" : "The user's email address"
          },
          "status" : {
            "$ref" : "#/components/schemas/UserStatus"
          },
          "onlineStatus" : {
            "$ref" : "#/components/schemas/UserOnlineStatus"
          },
          "profileImages" : {
            "$ref" : "#/components/schemas/User_profileImages"
          },
          "userBio" : {
            "type" : "string",
            "description" : "A brief description of the user",
            "nullable" : true
          }
        },
        "description" : "A cinebody user"
      },
      "UserType" : {
        "type" : "string",
        "description" : "User Type:\n * `regular` - A user with regular permissions\n * `admin` - An admin\n",
        "example" : "admin",
        "enum" : [ "regular", "admin" ]
      },
      "UserStatus" : {
        "type" : "string",
        "description" : "User Status:\n * `active` - The user is active\n * `pending` - The user has been invited\n",
        "example" : "active",
        "enum" : [ "active", "pending" ]
      },
      "UserOnlineStatus" : {
        "type" : "string",
        "description" : "User Online Status:\n * `online` - The user is actively using the Cinebody app\n * `offline` - The user is offline\n",
        "example" : "online",
        "enum" : [ "online", "offline" ]
      },
      "OrganizationStatus" : {
        "type" : "string",
        "description" : "Organization Status:\n * `active` - The organization is currently active\n * `freeTrialExpired` - The organization's free trial has expired\n * `delinquent` - The organization's last billing attempt failed\n * `inactive` - The organization does not have an active subscription\n",
        "example" : "active",
        "enum" : [ "active", "freeTrialExpired", "delinquent", "inactive" ]
      },
      "OrganizationStorageStatus" : {
        "type" : "string",
        "description" : "Storage Status:\n * `compliant` - The organization is in compliance with storage limits\n * `grace` - The organization is over their storage limit and using their grace storage\n * `locked` - The organization is over their storage limit and grace storage. Uploads are no longer possible\n",
        "example" : "compliant",
        "enum" : [ "compliant", "grace", "locked" ]
      },
      "OrganizationUserType" : {
        "type" : "string",
        "description" : "Storage Status:\n * `all` - All organization and team admins\n * `admin` - Organization admins only\n * `teamAdmin` - Team admins only\n",
        "example" : "compliant",
        "enum" : [ "all", "admin", "teamAdmin" ]
      },
      "UsersSortBy" : {
        "type" : "string",
        "example" : "firstName",
        "enum" : [ "firstName", "lastName" ]
      },
      "SortOrder" : {
        "type" : "string",
        "example" : "asc",
        "enum" : [ "asc", "desc" ]
      },
      "OrganizationAttribute" : {
        "type" : "string",
        "enum" : [ "id", "status", "storageStatus", "name", "profileImages", "heroImages", "isBilledOffline", "storageChecked", "customerId", "addressName", "addressLine1", "addressLine2", "addressCity", "addressState", "addressZip", "addressCountry", "lockedClipsAt", "endFreeTrialAt", "shouldAutoUpgrade", "isLocked" ]
      },
      "UserAttribute" : {
        "type" : "string",
        "enum" : [ "id", "firstName", "name", "profileImages", "userBio", "lastName", "email", "status", "profileImages", "onlineStatus" ]
      },
      "ErrorBadRequest" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Will be set to 'failure'",
            "example" : "failure"
          },
          "code" : {
            "type" : "string",
            "description" : "The error code. Use this code to identify the specific error.",
            "example" : "NO_USER_SLOTS"
          },
          "reason" : {
            "type" : "string",
            "description" : "An error description for developers",
            "example" : "There are no more slots open on the team.  The admin must remove users or upgrade the package."
          },
          "friendlyReason" : {
            "type" : "string",
            "description" : "An end-user friendly message",
            "example" : "You've run out of user spots.  Delete users or upgrade your package."
          }
        }
      },
      "ErrorNotAuthorized" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Will be set to 'failure'",
            "example" : "failure"
          },
          "code" : {
            "type" : "string",
            "description" : "The error code. Use this code to identify the specific error.",
            "example" : "APP_NOT_AUTHORIZED"
          },
          "reason" : {
            "type" : "string",
            "description" : "An error description for developers",
            "example" : "The app does not have permission to access that resource."
          },
          "friendlyReason" : {
            "type" : "string",
            "description" : "An end-user friendly message",
            "example" : "Sorry, something went wrong. Please try again later."
          }
        }
      },
      "ErrorMissingParameters" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Will be set to 'failure'",
            "example" : "failure"
          },
          "code" : {
            "type" : "string",
            "description" : "The error code. Use this code to identify the specific error.",
            "example" : "MISSING_PARAMETERS"
          },
          "reason" : {
            "type" : "string",
            "description" : "An error description for developers",
            "example" : "The request parameters are missing something that is required"
          },
          "friendlyReason" : {
            "type" : "string",
            "description" : "An end-user friendly message",
            "example" : "Sorry, something went wrong. Please try again later."
          }
        }
      },
      "ErrorNotFound" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Will be set to 'failure'",
            "example" : "failure"
          },
          "code" : {
            "type" : "string",
            "description" : "The error code. Use this code to identify the specific error.",
            "example" : "ORGANIZATION_NOT_FOUND"
          },
          "reason" : {
            "type" : "string",
            "description" : "An error description for developers",
            "example" : "The organization was not found"
          },
          "friendlyReason" : {
            "type" : "string",
            "description" : "An end-user friendly message",
            "example" : "Sorry, something went wrong. Please try again later."
          }
        }
      },
      "ErrorServerError" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Will be set to 'failure'",
            "example" : "failure"
          },
          "code" : {
            "type" : "string",
            "description" : "The error code. Use this code to identify the specific error.",
            "example" : "SERVER_ERROR"
          },
          "reason" : {
            "type" : "string",
            "description" : "An error description for developers",
            "example" : "An unknown error occurred in the API."
          },
          "friendlyReason" : {
            "type" : "string",
            "description" : "An end-user friendly message",
            "example" : "Something went wrong here. Please try again."
          }
        }
      },
      "inline_response_200" : {
        "type" : "object",
        "properties" : {
          "apiVersion" : {
            "type" : "string",
            "description" : "The current api version",
            "example" : "3.26.1"
          },
          "organizations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Organization"
            }
          }
        }
      },
      "inline_response_200_1" : {
        "type" : "object",
        "properties" : {
          "apiVersion" : {
            "type" : "string",
            "description" : "The current api version",
            "example" : "3.26.1"
          },
          "organization" : {
            "$ref" : "#/components/schemas/Organization"
          }
        }
      },
      "organizations_organizationId_body" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The organization name",
            "example" : "Lumenati Updated"
          },
          "email" : {
            "type" : "string",
            "description" : "The organization billing contact email",
            "example" : "billing@example.com"
          },
          "billingName" : {
            "type" : "string",
            "description" : "The name of the billing contact",
            "example" : "Travis"
          },
          "addressName" : {
            "type" : "string",
            "description" : "The address of the organization",
            "example" : "Lumenati Headquarters"
          },
          "addressLine1" : {
            "type" : "string",
            "description" : "The address of the organization",
            "nullable" : true,
            "example" : "3839 Jackson St"
          },
          "addressLine2" : {
            "type" : "string",
            "description" : "The address of the organization",
            "nullable" : true
          },
          "addressCity" : {
            "type" : "string",
            "description" : "The address of the organization",
            "nullable" : true,
            "example" : "Denver"
          },
          "addressState" : {
            "type" : "string",
            "description" : "The address of the organization",
            "nullable" : true,
            "example" : "CO"
          },
          "addressZip" : {
            "type" : "string",
            "description" : "The address of the organization",
            "example" : "80205"
          },
          "addressCountry" : {
            "type" : "string",
            "description" : "The address of the organization",
            "example" : "US"
          },
          "stripeToken" : {
            "type" : "string",
            "description" : "The stripe payment token to use for the account",
            "example" : "stripe_12345"
          },
          "shouldAutoUpgrade" : {
            "type" : "boolean",
            "description" : "Whether to automatically add storage add-ons when storage limits for the plan are hit.",
            "example" : true
          }
        }
      },
      "inline_response_200_2" : {
        "type" : "object",
        "properties" : {
          "apiVersion" : {
            "type" : "string",
            "description" : "The current api version",
            "example" : "3.26.1"
          },
          "count" : {
            "type" : "number",
            "description" : "The total number of users that match the request. Used for pagination.",
            "example" : 36
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          }
        }
      },
      "organizationId_users_body" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string",
            "description" : "The user id. Email must be specified if user id is not.",
            "format" : "uuid"
          },
          "email" : {
            "type" : "string",
            "description" : "The user's email. User id must be specified if email is not.",
            "example" : "newuser@example.com"
          },
          "type" : {
            "$ref" : "#/components/schemas/UserType"
          }
        },
        "anyOf" : [ {
          "required" : [ "userId" ]
        }, {
          "required" : [ "email" ]
        }, {
          "required" : [ "type", "userId" ]
        }, {
          "required" : [ "email", "type" ]
        } ]
      },
      "Organization_profileImages" : {
        "type" : "object",
        "properties" : {
          "profile80" : {
            "type" : "string",
            "description" : "URL of the profile image (80x80)",
            "example" : "https://s3.amazonaws.com/cinebody/default-logos/L_80.jpg"
          },
          "profile80@2x" : {
            "type" : "string",
            "description" : "URL of the profile image (160x160) to be used @2x",
            "example" : "https://s3.amazonaws.com/cinebody/default-logos/L_80@2x.jpg"
          },
          "profile150" : {
            "type" : "string",
            "description" : "URL of the profile image (150x150) to be used @2x",
            "example" : "https://s3.amazonaws.com/cinebody/default-logos/L_150.jpg"
          },
          "profile150@2x" : {
            "type" : "string",
            "description" : "URL of the profile image (300x300) to be used @2x",
            "example" : "https://s3.amazonaws.com/cinebody/default-logos/L_150@2x.jpg"
          }
        },
        "description" : "The profile picture / icon of the organization"
      },
      "Organization_heroImages" : {
        "type" : "object",
        "properties" : {
          "profile1200" : {
            "type" : "string",
            "description" : "URL of the hero image (1200x1200)",
            "example" : "https://s3.amazonaws.com/cinebody/default-org-hero--X1200.jpg"
          },
          "profile1200@2x" : {
            "type" : "string",
            "description" : "URL of the hero image (2400x2400) to be used @2x",
            "example" : "https://s3.amazonaws.com/cinebody/default-org-hero--X1200@2x.jpg\""
          }
        },
        "description" : "A hero image that can be used as a banner"
      },
      "User_profileImages" : {
        "type" : "object",
        "properties" : {
          "profile60" : {
            "type" : "string",
            "description" : "URL of the profile image (60x60)",
            "example" : "https://s3.amazonaws.com/cinebody-dev/default-profile--X60.jpg"
          },
          "profile60@2x" : {
            "type" : "string",
            "description" : "URL of the profile image (120x120) to be used @2x",
            "example" : "https://s3.amazonaws.com/cinebody-dev/default-profile--X60@2x.jpg"
          },
          "profile150" : {
            "type" : "string",
            "description" : "URL of the profile image (150x150) to be used @2x",
            "example" : "https://s3.amazonaws.com/cinebody-dev/default-profile--X150.jpg"
          },
          "profile150@2x" : {
            "type" : "string",
            "description" : "URL of the profile image (300x300) to be used @2x",
            "example" : "https://s3.amazonaws.com/cinebody-dev/default-profile--X150@2x.jpg"
          }
        },
        "description" : "The profile picture / icon of the organization"
      }
    },
    "responses" : {
      "400" : {
        "description" : "A bad request was made. Check the error code and parameters sent.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorBadRequest"
            }
          }
        }
      },
      "403" : {
        "description" : "The app is not authorized to perform that action.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorNotAuthorized"
            }
          }
        }
      },
      "406" : {
        "description" : "The request is missing required parameters.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorMissingParameters"
            }
          }
        }
      },
      "500" : {
        "description" : "The server encountered an unspecified error. This is a catch-all error. Check your request and parameters are valid.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorServerError"
            }
          }
        }
      }
    },
    "parameters" : {
      "limit" : {
        "name" : "limit",
        "in" : "query",
        "description" : "Limit the number of items returned",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "minimum" : 1,
          "type" : "integer",
          "format" : "int32",
          "default" : 10
        }
      },
      "page" : {
        "name" : "page",
        "in" : "query",
        "description" : "The page of results to fetch. The first page is 0",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "minimum" : 0,
          "type" : "integer",
          "format" : "int32",
          "default" : 10
        }
      },
      "organizationAttributes" : {
        "name" : "attributes",
        "in" : "query",
        "description" : "Limit the response to specific attributes to reduce response size. Default is to return everything.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/components/schemas/OrganizationAttribute"
          }
        }
      },
      "userAttributes" : {
        "name" : "attributes",
        "in" : "query",
        "description" : "Limit the response to specific attributes to reduce response size. Default is to return everything.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/components/schemas/UserAttribute"
          }
        }
      }
    },
    "securitySchemes" : {
      "APIKey" : {
        "type" : "apiKey",
        "name" : "x-api-key",
        "in" : "header"
      }
    }
  }
}